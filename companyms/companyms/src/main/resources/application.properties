jobms.url=http://localhost:8082
companyms.url=http://localhost:8081
reviewms.url=http://localhost:8083

spring.application.name=companyms
server.port=8081
## H2
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#
#spring.jpa.show-sql=true
#spring.jpa.generate-ddl=true
#
## create the table as the session starts/application starts and delete it when the session ends
#spring.jpa.hibernate.ddl-auto=update

# PostgreSQL - configuring our database to work with PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/company
#these are credentials using which our database will authenticate itself...with the database
spring.datasource.username=embark
spring.datasource.password=embark
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
# Here, we specify Dialect - this tells hibernate which dialect it should use; Dialect is a configuration of SQL generation and it varies from database to database.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# Eureka
#this is the URL which will be used by our micros service to register as a client and we have specified two properties here we are telling the job microservice to register as client with eureka and also to fetch the registry
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/

# the below two properties are by default true
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#Zipkin
# trace each and every request that goes on
management.tracing.sampling.probability=1.0

# RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

