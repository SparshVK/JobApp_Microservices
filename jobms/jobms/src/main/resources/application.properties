jobms.url=http://localhost:8082
companyms.url=http://localhost:8081
reviewms.url=http://localhost:8083

spring.application.name=jobms
server.port=8082
## H2
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#
# spring.jpa.show-sql=true
#spring.jpa.generate-ddl=true
#
## create the table as the session starts/application starts and delete it when the session ends
#spring.jpa.hibernate.ddl-auto=update

# PostgreSQL - configuring our database to work with PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/job
#these are credentials using which our database will authenticate itself...with the database
spring.datasource.username=embark
spring.datasource.password=embark
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
# Here, we specify Dialect - this tells hibernate which dialect it should use; Dialect is a configuration of SQL generation and it varies from database to database.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#Eureka
#this is the URL which will be used by our micros service to register as a client and we have specified two properties here we are telling the job microservice to register as client with eureka and also to fetch the registry
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

#Zipkin
management.tracing.sampling.probability=1.0

#Config Server
spring.config.import=optional:configserver:http://localhost:8080
spring.profiles.active=dev

# Actuator
# exposing the health endpoint in the actuator
#management.endpoints.web.exposure.include=health

# adding a lot more detail to "health" endpoint
#management.endpoint.health.show-details=always

# Resilience4J
resilience4j.circuitbreaker.instances.companyBreaker.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.companyBreaker.slidingWindowSize=10
resilience4j.circuitbreaker.instances.companyBreaker.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.companyBreaker.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.companyBreaker.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.companyBreaker.failureRateThreshold=50
resilience4j.circuitbreaker.instances.companyBreaker.register-health-indicator=true
resilience4j.circuitbreaker.instances.companyBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.companyBreaker.sliding-window-type=count_based

resilience4j.circuitbreaker.instances.companyBreaker.max-attempts=5
resilience4j.circuitbreaker.instances.companyBreaker.wait-duration=2s

resilience4j.ratelimiter.instances.companyBreaker.timeout-duration = 0
# 2 calls every 4 seconds are allowed without any wait
resilience4j.ratelimiter.instances.companyBreaker.limit-refresh-period = 4
resilience4j.ratelimiter.instances.companyBreaker.limit-for-period = 2

# Actuator Configuration
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always